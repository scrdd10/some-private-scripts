--Critical things
local gui=loadstring(game:HttpGet("https://raw.githubusercontent.com/scrdd10/some-private-scripts/refs/heads/main/libs/MainGui.txt"))()
local gui_funcs=loadstring(game:HttpGet("https://raw.githubusercontent.com/scrdd10/some-private-scripts/refs/heads/main/libs/GuiFuncs.txt"))()
--Services
local Players=game:GetService("Players")
local RunService=game:GetService("RunService")
local ContextActionService=game:GetService("ContextActionService")
local Teams=game:GetService("Teams")
--Const
local Exploiter:Player?=Players.LocalPlayer
local Camera:Camera?=workspace.CurrentCamera

local esp_gui
local regedit

local draw_esp_box=gui_funcs.draw_esp_box
--Funcs
local function Lock_property(ints: Instance, propetry: string, set_to): RBXScriptConnection
	local con

	con=ints:GetPropertyChangedSignal(propetry):Connect(function()
		ints[propetry]=set_to
	end)

	--Trigger
	ints[propetry]=set_to
	return con
end
--Code
function Aimbot_enable(setting,storage)
	local dot_to_count:Vector2=Vector2.new(Camera.ViewportSize.X/2,Camera.ViewportSize.Y/2)
	local fov:number=setting.fov.value

	RunService:BindToRenderStep("Aimbot_thread",Enum.RenderPriority.First.Value,function()
		local aim:BasePart=storage.locked_person
		if storage.locked_person then
			Camera.CFrame=CFrame.new(Camera.CFrame.Position,aim.Position)
			return
		end

		local possible_targets={}

		for _,Player:Player in Players:GetPlayers() do
			if Player==Exploiter or (Player.Team==Exploiter.Team and setting["team_check"].value) then continue end

			local Player_character:Model?=Player.Character
			if not Player_character or not Player_character.PrimaryPart then continue end
			local Player_primpart:BasePart?=Player_character.PrimaryPart

			local pos_on_screen:Vector3,onscreen=Camera:WorldToScreenPoint(Player_primpart.Position)
			if onscreen then
				local Vec2_pos_on_screen:Vector2=Vector2.new(pos_on_screen.X,pos_on_screen.Y)

				local distance_in_pixels:number=(Vec2_pos_on_screen-dot_to_count).Magnitude
				if distance_in_pixels<=fov then
					possible_targets[Player_character]=distance_in_pixels
				end
			end
		end

		local min:number=2^1024
		local selected_char:Model
		for char:Model,distance:number in possible_targets do
			if distance<min then
				min=distance
				selected_char=char
			end
		end

		if not selected_char then return end
		local selected_part:BasePart

		if selected_char:FindFirstChild("Head") then
			selected_part=selected_char.Head
		else
			selected_part=selected_char.PrimaryPart
		end

		storage.locked_person=selected_part
	end)
end

function Aimbot_disable(setting,storage)
	RunService:UnbindFromRenderStep("Aimbot_thread")
	storage.locked_person=nil
end

function Aimbot_update(setting,storage)
	local fov:number=setting.fov.value

	if fov then
		regedit.Aimfov.Size=UDim2.new(0,fov*2,0,fov*2)
	end
	regedit.Aimfov.Visible=setting.fovrender.value

	if setting["team_check"].value then
		storage.locked_person=nil
	end
end

function HeadScaler_enable(setting,storage)
	storage.connections_players={}
	storage.scaled_players={}

	storage.connections_editing_lock={}

	local editing_lock=storage.connections_editing_lock
	local scaled=storage.scaled_players
	local connections=storage.connections_players

	local function scale(Player)
		local default_value={}
		if not Player.Character or not Player.Character.PrimaryPart or not Player.Character:FindFirstChild("Head") then
			return
		end

		local Character=Player.Character

		local resolver=setting["resolver"].value

		if resolver then			
			local Possible_hitboxes=workspace:GetPartBoundsInRadius(
				Character.Head.Position,
				.1,
				OverlapParams.new()
			)

			for _,element:BasePart in Possible_hitboxes do
				if element:IsA("BasePart") or element:IsA("Part") then
					if element.Parent:IsA("Accessory") or not element:IsDescendantOf(Player.Character) then 
						continue
					end

					default_value[element]={element.Size, element.Transparency}

					local size:number?=setting.size.value

					editing_lock[Player]={
						Lock_property(element,"Size",Vector3.new(size,size,size)),
						Lock_property(element,"Transparency",setting.transparency.value and .8 or element.Transparency),
						Lock_property(element,"Massless",true)
					}
				end
			end

			scaled[Player]=default_value
		else
			local Head:BasePart=Player.Character.Head
			local size:number?=setting.size.value

			default_value[Head]={Head.Size, Head.Transparency}


			editing_lock[Player]={
				Lock_property(Head,"Size",Vector3.new(size,size,size)),
				Lock_property(Head,"Transparency",setting.transparency.value and .8 or Head.Transparency),
				Lock_property(Head,"Massless",true)
			}

			scaled[Player]=default_value
		end
	end

	for _,Player:Player in Players:GetPlayers() do
		if Player==Exploiter then continue end

		scale(Player)

		local con
		con=Player.CharacterAdded:Connect(function()
			repeat task.wait(.5) until Player.Character and Player.Character.PrimaryPart and Player.Character:FindFirstChild("Head")
			scale(Player)
		end)
		connections[Player]=con
	end
	connections.PlayerAdded=Players.PlayerAdded:Connect(function(Player)
		repeat task.wait(.5) until Player.Character and Player.Character.PrimaryPart and Player.Character:FindFirstChild("Head")
		scale(Player)
		
		local con
		con=Player.CharacterAdded:Connect(function()
			repeat task.wait(.5) until Player.Character and Player.Character.PrimaryPart and Player.Character:FindFirstChild("Head")
			scale(Player)
		end)
		connections[Player]=con
	end)


end

function HeadScaler_disable(setting,storage)
	local scaled=storage.scaled_players
	local connections=storage.connections_players
	local editing_lock=storage.connections_editing_lock

	for Player:Player,t:{} in editing_lock do
		for _,connection:RBXScriptConnection in t do
			connection:Disconnect()
		end
	end
	for _,connection:RBXScriptConnection in connections do
		connection:Disconnect()
	end
	for _,params:{} in scaled do
		for element:BasePart,value:{} in params do
			element.Size=value[1]
			element.Transparency=value[2]
		end
	end

	table.clear(scaled)
	table.clear(connections)
	table.clear(editing_lock)
end

function HeadScaler_update(setting,storage)
	local scaled=storage.scaled_players
	local connections=storage.connections_players
	local editing_lock=storage.connections_editing_lock

	local size=setting.size.value

	if not scaled or not size or size==0 then return end

	for Player:Player,t:{} in editing_lock do
		for _,connection:RBXScriptConnection in t do
			connection:Disconnect()
		end
	end
	table.clear(editing_lock)

	for Player:Player,params:{} in scaled do
		for element:BasePart,value:{} in params do
			editing_lock[Player]={
				Lock_property(element,"Size",Vector3.new(size,size,size)),
				Lock_property(element,"Transparency",setting.transparency.value and .8 or value[2]),
				Lock_property(element,"Massless",true)
			}
		end
	end
end

function ESP_enable(setting,storage)
	storage.players_with_esp={}
	local players_with_esp=storage.players_with_esp

	local function destroy_esp(Player)
		local e=players_with_esp[Player]
		if players_with_esp[Player] then
			players_with_esp[Player]=nil
			e:Destroy()
		end
	end

	RunService:BindToRenderStep("ESP_update",Enum.RenderPriority.First.Value+1,function()
		for _,Player:Player in Players:GetPlayers() do
			if not Player.Character or not Player.Character.PrimaryPart or Player==Exploiter then
				destroy_esp(Player)
				continue
			end
			local PrimaryPart:BasePart=Player.Character.PrimaryPart

			local Distance:number
			if Exploiter.Character and Exploiter.Character.PrimaryPart and not setting["calc_from_cam"].value then
				local ExPrim=Exploiter.Character.PrimaryPart
				Distance=(ExPrim.Position-PrimaryPart.Position).Magnitude
			else
				Distance=(Camera.CFrame.Position-PrimaryPart.Position).Magnitude
			end

			if Distance>setting.distance.value then
				destroy_esp(Player)
				continue
			end

			local pos,onscreen=Camera:WorldToScreenPoint(PrimaryPart.Position)
			if not onscreen then
				destroy_esp(Player)
				continue
			end

			local esp=players_with_esp[Player]
			if not esp then
				esp=draw_esp_box(esp_gui)
				players_with_esp[Player]=esp
			end

			esp.Position=UDim2.new(0,pos.X,0,pos.Y)
			esp.UIScale.Scale=20/Distance
			esp.UIStroke.Thickness=Distance/20

			esp.name.Text=setting["show_names"].value and Player.Name or ""
			esp.distance.Text=setting["show_distance"].value and tostring(math.floor(Distance)) or ""

			esp.name.UIScale.Scale=Distance/35
			esp.distance.UIScale.Scale=Distance/35

			if #Teams:GetChildren()<1 or not setting["team_check"].value then
				if esp.UIStroke.Color~=Color3.fromRGB(0, 255, 0) then
					esp.UIStroke.Color=Color3.fromRGB(0, 255, 0)
				end
				continue
			end

			if Exploiter.Team==Player.Team then
				esp.UIStroke.Color=Color3.fromRGB(0, 0, 255)
			else
				esp.UIStroke.Color=Color3.fromRGB(0, 255, 0)
			end
		end
	end)

	storage.players_connection=Players.PlayerRemoving:Connect(function(Player:Player)
		destroy_esp(Player)
	end)
end

function ESP_disable(setting,storage)
	RunService:UnbindFromRenderStep("ESP_update")
	storage.players_connection:Disconnect()
	storage.players_connection=nil

	for _,esp in storage.players_with_esp do
		esp:Destroy()
	end
	table.clear(storage.players_with_esp)
end

function ESP_update()
	return
end


local c_gui=gui.new("regedit")
local rage_category=c_gui:add_category("Rage","rbxassetid://12614416478")
local misc_category=c_gui:add_category("Visuals","rbxassetid://4674746809")

esp_gui=c_gui.esp
regedit=c_gui.gui

rage_category:add_func("Aimbot","left",Aimbot_enable,Aimbot_disable,Aimbot_update,{
	["fov"]={
		["name"]="Aim FOV",
		["value"]=200,
		["type"]="number"
	},
	["fovrender"]={
		["name"]="Render FOV",
		["value"]=false,
		["type"]="switch",
	},
	["team_check"]={
		["name"]="Team check",
		["value"]=false,
		["type"]="switch",
	}
},"switch")

rage_category:add_func("Head Scaler","left",HeadScaler_enable,HeadScaler_disable,HeadScaler_update,{
	["size"]={
		["name"]="Head scale",
		["value"]=5,
		["type"]="number"
	},
	["resolver"]={
		["name"]="Resolve head HB",
		["value"]=false,
		["type"]="switch",
	},
	["transparency"]={
		["name"]="Head transparency",
		["value"]=false,
		["type"]="switch"
	}
},"switch")

misc_category:add_func("ESP","left",ESP_enable,ESP_disable,ESP_update,{
	["team_check"]={
		["name"]="Team check",
		["value"]=false,
		["type"]="switch"
	},
	["distance"]={
		["name"]="Max distance",
		["value"]=500,
		["type"]="number"
	},
	["show_names"]={
		["name"]="Show Names",
		["value"]=false,
		["type"]="switch"
	},
	["show_distance"]={
		["name"]="Show Distance",
		["value"]=false,
		["type"]="switch"
	},
	["calc_from_cam"]={
		["name"]="Calculate from cam",
		["value"]=true,
		["type"]="switch"
	}
},"switch")

task.spawn(function()
	while task.wait(.5) do
		ContextActionService:UnbindAction("RbxCameraKeypress")
	end
end)
