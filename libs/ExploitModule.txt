local CollectionService=game:GetService("CollectionService")
local Players=game:GetService("Players")
local TweenService=game:GetService("TweenService")
local UserInputService=game:GetService("UserInputService")

local known_types_buttons={
	["execute"]=0,
	["switch"]=0,
}

local known_types_settings={
	["number"]=0,
	["value"]=0,
	["bind"]=0
}

local translator={
	["Zero"]=0,
	["One"]=1,
	["Two"]=2,
	["Three"]=3,
	["Four"]=4,
	["Five"]=5,
	["Six"]=6,
	["Seven"]=7,
	["Eight"]=8,
	["Nine"]=9,
}

local editing=false

local regedit

local Player=Players.LocalPlayer

local module={}
module.__index=module

function module.new(name: string, parent: Instance,callback_e, callback_d, callback_u, sttings: {}, btype: string)
	if not known_types_buttons[btype] then warn("not valid type of button") end

	local duplicate_button=parent.List[`button_{btype}`]:Clone()
	duplicate_button.Parent=parent.List
	duplicate_button.name.Text=name
	duplicate_button.Visible=true

	local self=setmetatable({},module)

	self.func_enable=callback_e
	self.func_disable=callback_d
	self.func_update=callback_u

	self.btype=btype

	self.settings=sttings
	self.settings.bind={
		["name"]="Bind button",
		["value"]="...",
		["type"]="bind"
	}
	self.exploit_storage={}

	self.settingshub_connections={}

	self.state=false
	self.changing=false

	self.button=duplicate_button

	module[`Setup{btype}`](self)

	return self
end

function module:s_enable()
	TweenService:Create(self.button.switch.dot,TweenInfo.new(.3,Enum.EasingStyle.Cubic),{Position=UDim2.new(0.8,0,0.5,0)}):Play()
	TweenService:Create(self.button.switch,TweenInfo.new(.2,Enum.EasingStyle.Sine),{BackgroundColor3=Color3.fromRGB(17, 130, 130)}):Play()

	self.state=true
	self.func_enable(self.settings,self.exploit_storage)
end

function module:s_disable()
	TweenService:Create(self.button.switch.dot,TweenInfo.new(.3,Enum.EasingStyle.Cubic),{Position=UDim2.new(0.2,0,0.5,0)}):Play()
	TweenService:Create(self.button.switch,TweenInfo.new(.2,Enum.EasingStyle.Sine),{BackgroundColor3=Color3.fromRGB(8, 60, 61)}):Play()

	self.state=false
	self.func_disable(self.settings,self.exploit_storage)
end

function module:e_execute()
	self.func_enable(self.settings,self.exploit_storage)

	TweenService:Create(self.button.execute,TweenInfo.new(.1,Enum.EasingStyle.Sine),{BackgroundColor3=Color3.fromRGB(17, 130, 130)}):Play()
	task.wait(.1)
	TweenService:Create(self.button.execute,TweenInfo.new(.1,Enum.EasingStyle.Sine),{BackgroundColor3=Color3.fromRGB(8, 60, 61)}):Play()
end

function module:u_update()
	self.func_update(self.settings,self.exploit_storage)
end

function module:Setupswitch()
	local button:TextButton=self.button
	regedit=CollectionService:GetTagged("MAIN_GUI_CHEAT")[1]

	local settingshub=regedit.settingshub

	--Switching
	button.MouseButton1Click:Connect(function()
		if self.state then
			if settingshub.Visible then self:HideSettingsHub() return end
			self:s_disable()
		else
			if settingshub.Visible then self:HideSettingsHub(); return end
			self:s_enable()
		end
	end)

	--Binding
	UserInputService.InputBegan:Connect(function(key,gpe)
		if gpe or not self.settings.bind or self.changing then return end

		if self.settings.bind.value==key.KeyCode then
			if self.state then
				self:s_disable()
			else
				self:s_enable()
			end
		end
	end)

	self:ConnectSettingsHub()
end

function module:Setupexecute()
	local button:TextButton=self.button
	regedit=CollectionService:GetTagged("MAIN_GUI_CHEAT")[1]

	local settingshub=regedit.settingshub

	--Executing
	button.MouseButton1Click:Connect(function()
		if settingshub.Visible then self:HideSettingsHub() return end
		self:e_execute()
	end)

	--Binding
	UserInputService.InputBegan:Connect(function(key,gpe)
		if gpe or not self.settings.bind or self.changing then return end

		if self.settings.bind.value==key.KeyCode then
			self:e_execute()
		end
	end)

	self:ConnectSettingsHub()
end

function module:ConnectSettingsHub()
	local button:TextButton=self.button
	regedit=CollectionService:GetTagged("MAIN_GUI_CHEAT")[1]

	local settingshub=regedit.settingshub

	button.MouseButton2Click:Connect(function()
		local Mouse=Player:GetMouse()

		settingshub.Position=UDim2.new(0,Mouse.X,0,Mouse.Y+60)
		settingshub.Visible=not settingshub.Visible
		if not settingshub.Visible then
			self:HideSettingsHub()
			return
		end

		--Setup all buttons
		self:AddbindType(self.settings.bind)
		for name,setting in self.settings do
			if name=="bind" then continue end
			self[`Add{setting.type}Type`](self,setting)
		end
	end)
end

function module:AddbindType(setting)
	--how looks like settings
		--[[
		settings={
			["bind"]={
				["name"]="Bind button",
				["value"]="...",
				["type"]="number/string/switch/bind",
			},
			["other"]={...}
		}
		]]

	regedit=CollectionService:GetTagged("MAIN_GUI_CHEAT")[1]

	local settingshub=regedit.settingshub

	local duplicate_of_button=settingshub["setting_example"]:Clone()

	duplicate_of_button.Name="settings"
	duplicate_of_button.name.Text=setting.name
	if typeof(setting.value)=="EnumItem" then
		duplicate_of_button.state.Text=setting.value.Name
	else
		duplicate_of_button.state.Text=setting.value
	end
	duplicate_of_button.Parent=settingshub
	duplicate_of_button.Visible=true

	self.settingshub_connections.BindConnection=duplicate_of_button.MouseButton1Click:Connect(function()
		if editing then return end
		editing=true

		self.changing=true
		duplicate_of_button.state.Text="rec..."

		self.settingshub_connections.bind=UserInputService.InputBegan:Connect(function(key,gpe)
			if gpe then
				return
			end

			if key.KeyCode.Name=="Unknown" then
				return
			end
			if key.KeyCode.Name=="Backspace" then 
				duplicate_of_button.state.Text="..."
				self.settings.bind.value="..."
				self.settingshub_connections.bind:Disconnect()
				editing=false
				return
			end

			duplicate_of_button.state.Text=key.KeyCode.Name
			self.settings.bind.value=key.KeyCode
			task.delay(.15,function() self.changing=false end)
			editing=false
			self.settingshub_connections.bind:Disconnect()
		end)
	end)
end

function module:AddnumberType(setting)
	regedit=CollectionService:GetTagged("MAIN_GUI_CHEAT")[1]

	local settingshub=regedit.settingshub

	local duplicate_of_button=settingshub["setting_example"]:Clone()

	duplicate_of_button.Name="settings"
	duplicate_of_button.name.Text=setting.name
	duplicate_of_button.state.Text=setting.value
	duplicate_of_button.Parent=settingshub
	duplicate_of_button.Visible=true

	self.settingshub_connections.NumberConnection=duplicate_of_button.MouseButton1Click:Connect(function()
		if editing then return end
		editing=true
		self.changing=true

		local saved_state=setting.value

		self.settingshub_connections.nickname=UserInputService.InputBegan:Connect(function(key,gpe)
			if gpe then
				return
			end

			if key.KeyCode.Name=="Unknown" then
				return
			end
			if key.KeyCode.Name=="Backspace" then
				local s=duplicate_of_button.state.Text

				duplicate_of_button.state.Text=s:sub(1,s:len()-1)
				setting.value=tonumber(s:sub(1,s:len()-1))
				
				self:u_update()
				return
			end
			if key.KeyCode.Name=="Return" then
				setting.value=tonumber(duplicate_of_button.state.Text)
				
				self.settingshub_connections.nickname:Disconnect()
				self.changing=false
				editing=false
				
				self:u_update()
				return
			end

			if not translator[key.KeyCode.Name] then return end
			if duplicate_of_button.state.Text=="0" then duplicate_of_button.state.Text="" end

			duplicate_of_button.state.Text=`{duplicate_of_button.state.Text}{translator[key.KeyCode.Name]}`
			setting.value=tonumber(duplicate_of_button.state.Text)
			self:u_update()
		end)
	end)
end


function module:AddstringType(setting)
	regedit=CollectionService:GetTagged("MAIN_GUI_CHEAT")[1]

	local settingshub=regedit.settingshub

	local duplicate_of_button=settingshub["setting_example"]:Clone()

	duplicate_of_button.Name="settings"
	duplicate_of_button.name.Text=setting.name
	duplicate_of_button.state.Text=setting.value
	duplicate_of_button.Parent=settingshub
	duplicate_of_button.Visible=true

	self.settingshub_connections.NumberConnection=duplicate_of_button.MouseButton1Click:Connect(function()
		if editing then return end
		editing=true
		self.changing=true

		local saved_state=setting.value

		self.settingshub_connections.string=UserInputService.InputBegan:Connect(function(key,gpe)
			if gpe then
				return
			end

			if key.KeyCode.Name=="Unknown" then
				return
			end
			if key.KeyCode.Name=="Backspace" then
				local s=duplicate_of_button.state.Text

				duplicate_of_button.state.Text=s:sub(1,s:len()-1)
				setting.value=s:sub(1,s:len()-1)
				
				self:u_update()
				return
			end
			if key.KeyCode.Name=="Return" then
				self.settingshub_connections.string:Disconnect()
				self.changing=false
				editing=false
				
				self:u_update()
				return
			end

			if not translator[key.KeyCode.Name] and key.KeyCode.Name:len()>1 then return end

			local s=`{duplicate_of_button.state.Text}{key.KeyCode.Name:len()>1 and translator[key.KeyCode.Name] or key.KeyCode.Name}`

			duplicate_of_button.state.Text=s:lower()
			setting.value=s:lower()
			self:u_update()
		end)
	end)
end

function module:AddswitchType(setting)
	regedit=CollectionService:GetTagged("MAIN_GUI_CHEAT")[1]

	local settingshub=regedit.settingshub

	local duplicate_of_button=settingshub["setting_example"]:Clone()

	duplicate_of_button.Name="1"
	duplicate_of_button.name.Text=setting.name
	duplicate_of_button.state.Visible=false
	duplicate_of_button.switch.Visible=true
	duplicate_of_button.Parent=settingshub
	duplicate_of_button.Visible=true
	
	if setting.value then
		TweenService:Create(duplicate_of_button.switch.dot,TweenInfo.new(.3,Enum.EasingStyle.Cubic),{Position=UDim2.new(0.8,0,0.5,0)}):Play()
		TweenService:Create(duplicate_of_button.switch,TweenInfo.new(.2,Enum.EasingStyle.Sine),{BackgroundColor3=Color3.fromRGB(17, 130, 130)}):Play()
	else
		TweenService:Create(duplicate_of_button.switch.dot,TweenInfo.new(.3,Enum.EasingStyle.Cubic),{Position=UDim2.new(0.2,0,0.5,0)}):Play()
		TweenService:Create(duplicate_of_button.switch,TweenInfo.new(.2,Enum.EasingStyle.Sine),{BackgroundColor3=Color3.fromRGB(8, 60, 61)}):Play()
	end
	
	self.settingshub_connections.switchConnection=duplicate_of_button.MouseButton1Click:Connect(function()
		setting.value=not setting.value
		if setting.value then
			TweenService:Create(duplicate_of_button.switch.dot,TweenInfo.new(.3,Enum.EasingStyle.Cubic),{Position=UDim2.new(0.8,0,0.5,0)}):Play()
			TweenService:Create(duplicate_of_button.switch,TweenInfo.new(.2,Enum.EasingStyle.Sine),{BackgroundColor3=Color3.fromRGB(17, 130, 130)}):Play()
			self:u_update()
		else
			TweenService:Create(duplicate_of_button.switch.dot,TweenInfo.new(.3,Enum.EasingStyle.Cubic),{Position=UDim2.new(0.2,0,0.5,0)}):Play()
			TweenService:Create(duplicate_of_button.switch,TweenInfo.new(.2,Enum.EasingStyle.Sine),{BackgroundColor3=Color3.fromRGB(8, 60, 61)}):Play()
			self:u_update()
		end
	end)
end

function module:HideSettingsHub()
	local button:TextButton=self.button
	regedit=CollectionService:GetTagged("MAIN_GUI_CHEAT")[1]

	local settingshub=regedit.settingshub

	settingshub.Visible=false

	for _,connection:RBXScriptConnection in self.settingshub_connections do
		connection:Disconnect()
	end
	self.changing=false
	editing=false

	for _,v in settingshub:GetChildren() do
		if v.Name=="setting_example" then continue end
		if v:IsA("TextButton") then
			v:Destroy()
		end
	end
end

return module
