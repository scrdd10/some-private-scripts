local CategoriesModule=loadstring(game:HttpGet("https://raw.githubusercontent.com/scrdd10/some-private-scripts/refs/heads/main/libs/CategoriesModules.txt"))()
local funcs=loadstring(game:HttpGet("https://raw.githubusercontent.com/scrdd10/some-private-scripts/refs/heads/main/libs/GuiLoader.txt"))()

local Players=game:GetService("Players")
local ContextActionService=game:GetService("ContextActionService")
local UserInputService=game:GetService("UserInputService")
local TweenService=game:GetService("TweenService")

local Exploiter=Players.LocalPlayer
local Mouse=Exploiter:GetMouse()

local module={}
module.__index=module

function module.new(nametag: string)
	local self=setmetatable({},module)

	self.currentCat=nil

	self.categories={}
	local maingui,esp,settingshub=funcs.createStartGui(nametag)
	
	self.gui=maingui
	self.esp=esp
	self.settingshub=settingshub

	self:SetupConnetions()

	self.gui.outline.outline.outline.tabbuttons.user.name.Text=Exploiter.Name
	self.gui.outline.outline.outline.tabbuttons.user.logo.Image=Players:GetUserThumbnailAsync(
		Exploiter.UserId,
		Enum.ThumbnailType.HeadShot,
		Enum.ThumbnailSize.Size420x420
	)

	self.open=true
	
	self.gui:AddTag("MAIN_GUI_CHEAT")
	
	return self
end

function module:HideMenu()
	for _,category in self.categories do
		category:HideSettingsHub()
	end

	TweenService:Create(self.gui.outline.UIScale,TweenInfo.new(.4,Enum.EasingStyle.Cubic),{Scale=0}):Play()
	TweenService:Create(self.gui.outline,TweenInfo.new(.15,Enum.EasingStyle.Sine),{GroupTransparency=1}):Play()
	task.wait(.4)
	self.open=false
end

function module:ShowMenu()
	self.open=true
	TweenService:Create(self.gui.outline.UIScale,TweenInfo.new(.4,Enum.EasingStyle.Cubic),{Scale=1}):Play()
	task.wait(.1)
	TweenService:Create(self.gui.outline,TweenInfo.new(.15,Enum.EasingStyle.Sine),{GroupTransparency=0}):Play()
end

function module:swap_to_category(category_name: string)
	if not self.currentCat then
		self.categories[category_name]:Show()

		self.currentCat=category_name
	else
		self.categories[self.currentCat]:Hide()
		self.categories[self.currentCat]:HideSettingsHub()

		self.categories[category_name]:Show()

		self.currentCat=category_name
	end
end

function module:add_category(name: string, decal: string)
	local category=CategoriesModule.new(name, decal)

	self.categories[name]=category

	category.button.MouseButton1Click:Connect(function()
		self:swap_to_category(category.name)
	end)

	return category
end

function module:SetupConnetions()
	--Open menu
	UserInputService.InputBegan:Connect(function(key,gpe)
		if gpe then
			return
		end

		local state=self.open
		if key.KeyCode==Enum.KeyCode.Insert then
			if state then
				self:HideMenu()
			else
				self:ShowMenu()
			end
		end
	end)

	--Draging gui
	local dragging_trigger=self.gui.outline.outline.outline.tabbuttons.name

	local starting_pos_main_gui:UDim2
	local starting_pos_settings_hub:UDim2
	local lastMousePos:UDim2
	local drag=false

	local function update_pos(inputing_pos,starting_pos)
		local deviation:UDim2=lastMousePos-inputing_pos
		return UDim2.new(starting_pos.X.Scale,starting_pos.X.Offset-deviation.X.Offset,starting_pos.Y.Scale,starting_pos.Y.Offset-deviation.Y.Offset)
	end

	dragging_trigger:GetPropertyChangedSignal("GuiState"):Connect(function()
		if dragging_trigger.GuiState==Enum.GuiState.Press then
			drag=true
			starting_pos_main_gui=self.gui.outline.Position
			starting_pos_settings_hub=self.settingshub.Position
		else
			drag=false
		end
	end)

	UserInputService.InputChanged:Connect(function(input)
		if input.UserInputType==Enum.UserInputType.MouseMovement and drag then
			
			self.gui.outline.Position=update_pos(UDim2.new(0,input.Position.X,0,input.Position.Y),starting_pos_main_gui)
			self.settingshub.Position=update_pos(UDim2.new(0,input.Position.X,0,input.Position.Y),starting_pos_settings_hub)
		else
			lastMousePos=UDim2.new(0,Mouse.X,0,Mouse.Y)
		end
	end)
end

return module
